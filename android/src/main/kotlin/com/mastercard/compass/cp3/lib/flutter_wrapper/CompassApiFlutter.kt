// Copyright (c) 2022 Mastercard. All rights reserved.
// Use of this source code is governed by a Apache License, Version 2.0 that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mastercard.compass.cp3.lib.flutter_wrapper

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class EnrolmentStatus(val raw: Int) {
  EXISTING(0),
  NEW(1);

  companion object {
    fun ofRaw(raw: Int): EnrolmentStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ResponseStatus(val raw: Int) {
  SUCCESS(0),
  ERROR(1),
  UNDEFINED(2);

  companion object {
    fun ofRaw(raw: Int): ResponseStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class OperationMode(val raw: Int) {
  BEST_AVAILABLE(0),
  FULL(1);

  companion object {
    fun ofRaw(raw: Int): OperationMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Modality(val raw: Int) {
  FACE(0),
  LEFT_PALM(1),
  RIGHT_PALM(2);

  companion object {
    fun ofRaw(raw: Int): Modality? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FormFactorStatus(val raw: Int) {
  ACTIVE(0),
  BLACKLISTED(1),
  UNKNOWN(2),
  BLOCED(3);

  companion object {
    fun ofRaw(raw: Int): FormFactorStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FormFactor(val raw: Int) {
  CARD(0),
  QR(1),
  NONE(2);

  companion object {
    fun ofRaw(raw: Int): FormFactor? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class SVAType(val raw: Int) {
  FINANCIALSVA(0),
  EVOUCHERSVA(1);

  companion object {
    fun ofRaw(raw: Int): SVAType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class EVoucherType(val raw: Int) {
  COMMODITY(0),
  POINT(1);

  companion object {
    fun ofRaw(raw: Int): EVoucherType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SaveBiometricConsentResult (
  val consentID: String,
  val responseStatus: ResponseStatus

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SaveBiometricConsentResult {
      val consentID = list[0] as String
      val responseStatus = ResponseStatus.ofRaw(list[1] as Int)!!
      return SaveBiometricConsentResult(consentID, responseStatus)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentID,
      responseStatus.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RegisterUserWithBiometricsResult (
  val bioToken: String,
  val programGUID: String,
  val rID: String,
  val enrolmentStatus: EnrolmentStatus

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): RegisterUserWithBiometricsResult {
      val bioToken = list[0] as String
      val programGUID = list[1] as String
      val rID = list[2] as String
      val enrolmentStatus = EnrolmentStatus.ofRaw(list[3] as Int)!!
      return RegisterUserWithBiometricsResult(bioToken, programGUID, rID, enrolmentStatus)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      bioToken,
      programGUID,
      rID,
      enrolmentStatus.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RegisterBasicUserResult (
  val rID: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): RegisterBasicUserResult {
      val rID = list[0] as String
      return RegisterBasicUserResult(rID)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      rID,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class WriteProfileResult (
  val consumerDeviceNumber: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): WriteProfileResult {
      val consumerDeviceNumber = list[0] as String
      return WriteProfileResult(consumerDeviceNumber)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consumerDeviceNumber,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class WritePasscodeResult (
  val responseStatus: ResponseStatus

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): WritePasscodeResult {
      val responseStatus = ResponseStatus.ofRaw(list[0] as Int)!!
      return WritePasscodeResult(responseStatus)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      responseStatus.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class VerifyPasscodeResult (
  val rID: String,
  val status: Boolean,
  val retryCount: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): VerifyPasscodeResult {
      val rID = list[0] as String
      val status = list[1] as Boolean
      val retryCount = list[2].let { if (it is Int) it.toLong() else it as Long }
      return VerifyPasscodeResult(rID, status, retryCount)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      rID,
      status,
      retryCount,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Match (
  val distance: Long,
  val modality: String,
  val normalizedScore: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Match {
      val distance = list[0].let { if (it is Int) it.toLong() else it as Long }
      val modality = list[1] as String
      val normalizedScore = list[2].let { if (it is Int) it.toLong() else it as Long }
      return Match(distance, modality, normalizedScore)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      distance,
      modality,
      normalizedScore,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UserVerificationResult (
  val isMatchFound: Boolean,
  val rID: String,
  val biometricMatchList: List<Match?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UserVerificationResult {
      val isMatchFound = list[0] as Boolean
      val rID = list[1] as String
      val biometricMatchList = list[2] as List<Match?>
      return UserVerificationResult(isMatchFound, rID, biometricMatchList)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isMatchFound,
      rID,
      biometricMatchList,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RegistrationDataResult (
  val isRegisteredInProgram: Boolean,
  val authMethods: List<String?>,
  val modalityType: List<String?>,
  val rID: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): RegistrationDataResult {
      val isRegisteredInProgram = list[0] as Boolean
      val authMethods = list[1] as List<String?>
      val modalityType = list[2] as List<String?>
      val rID = list[3] as String
      return RegistrationDataResult(isRegisteredInProgram, authMethods, modalityType, rID)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isRegisteredInProgram,
      authMethods,
      modalityType,
      rID,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ReadProgramSpaceResult (
  val programSpaceData: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ReadProgramSpaceResult {
      val programSpaceData = list[0] as String
      return ReadProgramSpaceResult(programSpaceData)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      programSpaceData,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class WriteProgramSpaceResult (
  val isSuccess: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): WriteProgramSpaceResult {
      val isSuccess = list[0] as Boolean
      return WriteProgramSpaceResult(isSuccess)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isSuccess,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BlacklistFormFactorResult (
  val type: String,
  val status: FormFactorStatus,
  val consumerDeviceNumber: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BlacklistFormFactorResult {
      val type = list[0] as String
      val status = FormFactorStatus.ofRaw(list[1] as Int)!!
      val consumerDeviceNumber = list[2] as String
      return BlacklistFormFactorResult(type, status, consumerDeviceNumber)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type,
      status.raw,
      consumerDeviceNumber,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ReadSVAResult (
  val currentBalance: Long,
  val transactionCount: Long,
  val purseType: String,
  val unit: String,
  val lastTransaction: Transaction

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ReadSVAResult {
      val currentBalance = list[0].let { if (it is Int) it.toLong() else it as Long }
      val transactionCount = list[1].let { if (it is Int) it.toLong() else it as Long }
      val purseType = list[2] as String
      val unit = list[3] as String
      val lastTransaction = Transaction.fromList(list[4] as List<Any?>)
      return ReadSVAResult(currentBalance, transactionCount, purseType, unit, lastTransaction)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      currentBalance,
      transactionCount,
      purseType,
      unit,
      lastTransaction.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Transaction (
  val amount: Long,
  val balance: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Transaction {
      val amount = list[0].let { if (it is Int) it.toLong() else it as Long }
      val balance = list[1].let { if (it is Int) it.toLong() else it as Long }
      return Transaction(amount, balance)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      amount,
      balance,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SVA (
  val type: SVAType,
  val unit: String,
  val eVoucherType: EVoucherType

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SVA {
      val type = SVAType.ofRaw(list[0] as Int)!!
      val unit = list[1] as String
      val eVoucherType = EVoucherType.ofRaw(list[2] as Int)!!
      return SVA(type, unit, eVoucherType)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type.raw,
      unit,
      eVoucherType.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CreateSVAResult (
  val response: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CreateSVAResult {
      val response = list[0] as String
      return CreateSVAResult(response)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      response,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GenerateCpUserProfileResult (
  val token: String,
  val consumerDeviceNumber: String,
  val message: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): GenerateCpUserProfileResult {
      val token = list[0] as String
      val consumerDeviceNumber = list[1] as String
      val message = list[2] as String
      return GenerateCpUserProfileResult(token, consumerDeviceNumber, message)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      token,
      consumerDeviceNumber,
      message,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object CommunityPassApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BlacklistFormFactorResult.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CreateSVAResult.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GenerateCpUserProfileResult.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Match.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ReadProgramSpaceResult.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ReadSVAResult.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterBasicUserResult.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterUserWithBiometricsResult.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegistrationDataResult.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SVA.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SaveBiometricConsentResult.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Transaction.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UserVerificationResult.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VerifyPasscodeResult.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          WritePasscodeResult.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          WriteProfileResult.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          WriteProgramSpaceResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is BlacklistFormFactorResult -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is CreateSVAResult -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is GenerateCpUserProfileResult -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is Match -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is ReadProgramSpaceResult -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is ReadSVAResult -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is RegisterBasicUserResult -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is RegisterUserWithBiometricsResult -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is RegistrationDataResult -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is SVA -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is SaveBiometricConsentResult -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is Transaction -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is UserVerificationResult -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is VerifyPasscodeResult -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is WritePasscodeResult -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is WriteProfileResult -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is WriteProgramSpaceResult -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CommunityPassApi {
  fun saveBiometricConsent(reliantGUID: String, programGUID: String, consumerConsentValue: Boolean, callback: (Result<SaveBiometricConsentResult>) -> Unit)
  fun getRegisterUserWithBiometrics(reliantGUID: String, programGUID: String, consentID: String, modalities: List<String>, operationMode: OperationMode, callback: (Result<RegisterUserWithBiometricsResult>) -> Unit)
  fun getRegisterBasicUser(reliantGUID: String, programGUID: String, formFactor: String, callback: (Result<RegisterBasicUserResult>) -> Unit)
  fun getWriteProfile(reliantGUID: String, programGUID: String, rID: String, overwriteCard: Boolean, callback: (Result<WriteProfileResult>) -> Unit)
  fun getWritePasscode(reliantGUID: String, programGUID: String, rID: String, passcode: String, callback: (Result<WritePasscodeResult>) -> Unit)
  fun getVerifyPasscode(reliantGUID: String, programGUID: String, passcode: String, formFactor: FormFactor, qrCpUserProfile: String?, callback: (Result<VerifyPasscodeResult>) -> Unit)
  fun getUserVerification(reliantGUID: String, programGUID: String, formFactor: String, qrBase64: String?, modalities: List<String>, callback: (Result<UserVerificationResult>) -> Unit)
  fun getRegistrationData(reliantGUID: String, programGUID: String, callback: (Result<RegistrationDataResult>) -> Unit)
  fun getWriteProgramSpace(reliantGUID: String, programGUID: String, rID: String, programSpaceData: String, encryptData: Boolean, callback: (Result<WriteProgramSpaceResult>) -> Unit)
  fun getReadProgramSpace(reliantGUID: String, programGUID: String, rID: String, decryptData: Boolean, callback: (Result<ReadProgramSpaceResult>) -> Unit)
  fun getBlacklistFormFactor(reliantGUID: String, programGUID: String, rID: String, consumerDeviceNumber: String, type: FormFactor, callback: (Result<BlacklistFormFactorResult>) -> Unit)
  fun getReadSVA(reliantGUID: String, programGUID: String, rID: String, svaUnit: String, callback: (Result<ReadSVAResult>) -> Unit)
  fun getCreateSVA(reliantGUID: String, programGUID: String, rID: String?, sva: SVA, callback: (Result<CreateSVAResult>) -> Unit)
  fun getGenerateCpUserProfile(reliantGUID: String, programGUID: String, rID: String, passcode: String?, callback: (Result<GenerateCpUserProfileResult>) -> Unit)

  companion object {
    /** The codec used by CommunityPassApi. */
    val codec: MessageCodec<Any?> by lazy {
      CommunityPassApiCodec
    }
    /** Sets up an instance of `CommunityPassApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: CommunityPassApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.saveBiometricConsent", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val consumerConsentValueArg = args[2] as Boolean
            api.saveBiometricConsent(reliantGUIDArg, programGUIDArg, consumerConsentValueArg) { result: Result<SaveBiometricConsentResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getRegisterUserWithBiometrics", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val consentIDArg = args[2] as String
            val modalitiesArg = args[3] as List<String>
            val operationModeArg = OperationMode.ofRaw(args[4] as Int)!!
            api.getRegisterUserWithBiometrics(reliantGUIDArg, programGUIDArg, consentIDArg, modalitiesArg, operationModeArg) { result: Result<RegisterUserWithBiometricsResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getRegisterBasicUser", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val formFactorArg = args[2] as String
            api.getRegisterBasicUser(reliantGUIDArg, programGUIDArg, formFactorArg) { result: Result<RegisterBasicUserResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getWriteProfile", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val rIDArg = args[2] as String
            val overwriteCardArg = args[3] as Boolean
            api.getWriteProfile(reliantGUIDArg, programGUIDArg, rIDArg, overwriteCardArg) { result: Result<WriteProfileResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getWritePasscode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val rIDArg = args[2] as String
            val passcodeArg = args[3] as String
            api.getWritePasscode(reliantGUIDArg, programGUIDArg, rIDArg, passcodeArg) { result: Result<WritePasscodeResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getVerifyPasscode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val passcodeArg = args[2] as String
            val formFactorArg = FormFactor.ofRaw(args[3] as Int)!!
            val qrCpUserProfileArg = args[4] as String?
            api.getVerifyPasscode(reliantGUIDArg, programGUIDArg, passcodeArg, formFactorArg, qrCpUserProfileArg) { result: Result<VerifyPasscodeResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getUserVerification", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val formFactorArg = args[2] as String
            val qrBase64Arg = args[3] as String?
            val modalitiesArg = args[4] as List<String>
            api.getUserVerification(reliantGUIDArg, programGUIDArg, formFactorArg, qrBase64Arg, modalitiesArg) { result: Result<UserVerificationResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getRegistrationData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            api.getRegistrationData(reliantGUIDArg, programGUIDArg) { result: Result<RegistrationDataResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getWriteProgramSpace", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val rIDArg = args[2] as String
            val programSpaceDataArg = args[3] as String
            val encryptDataArg = args[4] as Boolean
            api.getWriteProgramSpace(reliantGUIDArg, programGUIDArg, rIDArg, programSpaceDataArg, encryptDataArg) { result: Result<WriteProgramSpaceResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getReadProgramSpace", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val rIDArg = args[2] as String
            val decryptDataArg = args[3] as Boolean
            api.getReadProgramSpace(reliantGUIDArg, programGUIDArg, rIDArg, decryptDataArg) { result: Result<ReadProgramSpaceResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getBlacklistFormFactor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val rIDArg = args[2] as String
            val consumerDeviceNumberArg = args[3] as String
            val typeArg = FormFactor.ofRaw(args[4] as Int)!!
            api.getBlacklistFormFactor(reliantGUIDArg, programGUIDArg, rIDArg, consumerDeviceNumberArg, typeArg) { result: Result<BlacklistFormFactorResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getReadSVA", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val rIDArg = args[2] as String
            val svaUnitArg = args[3] as String
            api.getReadSVA(reliantGUIDArg, programGUIDArg, rIDArg, svaUnitArg) { result: Result<ReadSVAResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getCreateSVA", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val rIDArg = args[2] as String?
            val svaArg = args[3] as SVA
            api.getCreateSVA(reliantGUIDArg, programGUIDArg, rIDArg, svaArg) { result: Result<CreateSVAResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CommunityPassApi.getGenerateCpUserProfile", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reliantGUIDArg = args[0] as String
            val programGUIDArg = args[1] as String
            val rIDArg = args[2] as String
            val passcodeArg = args[3] as String?
            api.getGenerateCpUserProfile(reliantGUIDArg, programGUIDArg, rIDArg, passcodeArg) { result: Result<GenerateCpUserProfileResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
