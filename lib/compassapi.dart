// Copyright (c) 2022 Mastercard. All rights reserved.
// Use of this source code is governed by a Apache License, Version 2.0 that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum EnrolmentStatus {
  EXISTING,
  NEW,
}

enum ResponseStatus {
  SUCCESS,
  ERROR,
  UNDEFINED,
}

enum OperationMode {
  BEST_AVAILABLE,
  FULL,
}

enum Modality {
  FACE,
  LEFT_PALM,
  RIGHT_PALM,
}

enum FormFactorStatus {
  ACTIVE,
  BLACKLISTED,
  UNKNOWN,
  BLOCED,
}

enum FormFactor {
  CARD,
  QR,
  NONE,
}

enum SVAType {
  FinancialSVA,
  EVoucherSVA,
}

enum EVoucherType {
  COMMODITY,
  POINT,
}

enum ConsentStatus {
  CONSENT_GRANTED,
  CONSENT_DENIED,
}

class DarkThemeColorScheme {
  DarkThemeColorScheme({
    required this.primary,
    required this.onPrimary,
    required this.primaryContainer,
    required this.onPrimaryContainer,
    required this.background,
    required this.onBackground,
    required this.tertiaryContainer,
  });

  String primary;

  String onPrimary;

  String primaryContainer;

  String onPrimaryContainer;

  String background;

  String onBackground;

  String tertiaryContainer;

  Object encode() {
    return <Object?>[
      primary,
      onPrimary,
      primaryContainer,
      onPrimaryContainer,
      background,
      onBackground,
      tertiaryContainer,
    ];
  }

  static DarkThemeColorScheme decode(Object result) {
    result as List<Object?>;
    return DarkThemeColorScheme(
      primary: result[0]! as String,
      onPrimary: result[1]! as String,
      primaryContainer: result[2]! as String,
      onPrimaryContainer: result[3]! as String,
      background: result[4]! as String,
      onBackground: result[5]! as String,
      tertiaryContainer: result[6]! as String,
    );
  }
}

class LightThemeColorScheme {
  LightThemeColorScheme({
    required this.primary,
    required this.onPrimary,
    required this.primaryContainer,
    required this.onPrimaryContainer,
    required this.background,
    required this.onBackground,
    required this.tertiaryContainer,
  });

  String primary;

  String onPrimary;

  String primaryContainer;

  String onPrimaryContainer;

  String background;

  String onBackground;

  String tertiaryContainer;

  Object encode() {
    return <Object?>[
      primary,
      onPrimary,
      primaryContainer,
      onPrimaryContainer,
      background,
      onBackground,
      tertiaryContainer,
    ];
  }

  static LightThemeColorScheme decode(Object result) {
    result as List<Object?>;
    return LightThemeColorScheme(
      primary: result[0]! as String,
      onPrimary: result[1]! as String,
      primaryContainer: result[2]! as String,
      onPrimaryContainer: result[3]! as String,
      background: result[4]! as String,
      onBackground: result[5]! as String,
      tertiaryContainer: result[6]! as String,
    );
  }
}

class ConsentScreenConfig {
  ConsentScreenConfig({
    this.partnerPrivacyPolicyTitle,
    this.partnerPrivacyPolicyContent,
    this.partnerPrivacyPolicyExcerptTitle,
    this.partnerPrivacyPolicyExcerptContent,
    this.acceptConsentButtonLabel,
    this.declineConsentButtonLabel,
    this.enableCommunityPassPrivacyPolicy,
    this.enableBiometricNotice,
    this.enablePartnerPrivacyPolicy,
    this.beforeYouProceedText,
    this.beforeYouProceedFontSize,
    this.consentTitleFontSize,
    this.consentContentFontSize,
    this.switchLabelFontSize,
    this.buttonLabelFontSize,
    this.buttonBorderRadius,
    this.buttonHeight,
    this.darkThemeColorScheme,
    this.lightThemeColorScheme,
  });

  String? partnerPrivacyPolicyTitle;

  String? partnerPrivacyPolicyContent;

  String? partnerPrivacyPolicyExcerptTitle;

  String? partnerPrivacyPolicyExcerptContent;

  String? acceptConsentButtonLabel;

  String? declineConsentButtonLabel;

  bool? enableCommunityPassPrivacyPolicy;

  bool? enableBiometricNotice;

  bool? enablePartnerPrivacyPolicy;

  String? beforeYouProceedText;

  int? beforeYouProceedFontSize;

  int? consentTitleFontSize;

  int? consentContentFontSize;

  int? switchLabelFontSize;

  int? buttonLabelFontSize;

  int? buttonBorderRadius;

  int? buttonHeight;

  DarkThemeColorScheme? darkThemeColorScheme;

  LightThemeColorScheme? lightThemeColorScheme;

  Object encode() {
    return <Object?>[
      partnerPrivacyPolicyTitle,
      partnerPrivacyPolicyContent,
      partnerPrivacyPolicyExcerptTitle,
      partnerPrivacyPolicyExcerptContent,
      acceptConsentButtonLabel,
      declineConsentButtonLabel,
      enableCommunityPassPrivacyPolicy,
      enableBiometricNotice,
      enablePartnerPrivacyPolicy,
      beforeYouProceedText,
      beforeYouProceedFontSize,
      consentTitleFontSize,
      consentContentFontSize,
      switchLabelFontSize,
      buttonLabelFontSize,
      buttonBorderRadius,
      buttonHeight,
      darkThemeColorScheme?.encode(),
      lightThemeColorScheme?.encode(),
    ];
  }

  static ConsentScreenConfig decode(Object result) {
    result as List<Object?>;
    return ConsentScreenConfig(
      partnerPrivacyPolicyTitle: result[0] as String?,
      partnerPrivacyPolicyContent: result[1] as String?,
      partnerPrivacyPolicyExcerptTitle: result[2] as String?,
      partnerPrivacyPolicyExcerptContent: result[3] as String?,
      acceptConsentButtonLabel: result[4] as String?,
      declineConsentButtonLabel: result[5] as String?,
      enableCommunityPassPrivacyPolicy: result[6] as bool?,
      enableBiometricNotice: result[7] as bool?,
      enablePartnerPrivacyPolicy: result[8] as bool?,
      beforeYouProceedText: result[9] as String?,
      beforeYouProceedFontSize: result[10] as int?,
      consentTitleFontSize: result[11] as int?,
      consentContentFontSize: result[12] as int?,
      switchLabelFontSize: result[13] as int?,
      buttonLabelFontSize: result[14] as int?,
      buttonBorderRadius: result[15] as int?,
      buttonHeight: result[16] as int?,
      darkThemeColorScheme: result[17] != null
          ? DarkThemeColorScheme.decode(result[17]! as List<Object?>)
          : null,
      lightThemeColorScheme: result[18] != null
          ? LightThemeColorScheme.decode(result[18]! as List<Object?>)
          : null,
    );
  }
}

class AdditionalInfo {
  AdditionalInfo({
    this.consentID,
    this.responseStatus,
  });

  String? consentID;

  String? responseStatus;

  Object encode() {
    return <Object?>[
      consentID,
      responseStatus,
    ];
  }

  static AdditionalInfo decode(Object result) {
    result as List<Object?>;
    return AdditionalInfo(
      consentID: result[0] as String?,
      responseStatus: result[1] as String?,
    );
  }
}

class ConsentResult {
  ConsentResult({
    this.communityPassPrivacyPolicyAccepted,
    this.communityPassBiometricNoticeAccepted,
    this.partnerPrivacyPolicyAccepted,
    this.additionalInfo,
  });

  bool? communityPassPrivacyPolicyAccepted;

  bool? communityPassBiometricNoticeAccepted;

  bool? partnerPrivacyPolicyAccepted;

  AdditionalInfo? additionalInfo;

  Object encode() {
    return <Object?>[
      communityPassPrivacyPolicyAccepted,
      communityPassBiometricNoticeAccepted,
      partnerPrivacyPolicyAccepted,
      additionalInfo?.encode(),
    ];
  }

  static ConsentResult decode(Object result) {
    result as List<Object?>;
    return ConsentResult(
      communityPassPrivacyPolicyAccepted: result[0] as bool?,
      communityPassBiometricNoticeAccepted: result[1] as bool?,
      partnerPrivacyPolicyAccepted: result[2] as bool?,
      additionalInfo: result[3] != null
          ? AdditionalInfo.decode(result[3]! as List<Object?>)
          : null,
    );
  }
}

class SaveBiometricConsentResult {
  SaveBiometricConsentResult({
    required this.consentID,
    required this.responseStatus,
  });

  String consentID;

  ResponseStatus responseStatus;

  Object encode() {
    return <Object?>[
      consentID,
      responseStatus.index,
    ];
  }

  static SaveBiometricConsentResult decode(Object result) {
    result as List<Object?>;
    return SaveBiometricConsentResult(
      consentID: result[0]! as String,
      responseStatus: ResponseStatus.values[result[1]! as int],
    );
  }
}

class CommunityPassConsentScreenResult {
  CommunityPassConsentScreenResult({
    required this.status,
    this.result,
  });

  ConsentStatus status;

  ConsentResult? result;

  Object encode() {
    return <Object?>[
      status.index,
      result?.encode(),
    ];
  }

  static CommunityPassConsentScreenResult decode(Object result) {
    result as List<Object?>;
    return CommunityPassConsentScreenResult(
      status: ConsentStatus.values[result[0]! as int],
      result: result[1] != null
          ? ConsentResult.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class RegisterUserWithBiometricsResult {
  RegisterUserWithBiometricsResult({
    required this.bioToken,
    required this.programGUID,
    required this.rID,
    required this.enrolmentStatus,
  });

  String bioToken;

  String programGUID;

  String rID;

  EnrolmentStatus enrolmentStatus;

  Object encode() {
    return <Object?>[
      bioToken,
      programGUID,
      rID,
      enrolmentStatus.index,
    ];
  }

  static RegisterUserWithBiometricsResult decode(Object result) {
    result as List<Object?>;
    return RegisterUserWithBiometricsResult(
      bioToken: result[0]! as String,
      programGUID: result[1]! as String,
      rID: result[2]! as String,
      enrolmentStatus: EnrolmentStatus.values[result[3]! as int],
    );
  }
}

class RegisterBasicUserResult {
  RegisterBasicUserResult({
    required this.rID,
  });

  String rID;

  Object encode() {
    return <Object?>[
      rID,
    ];
  }

  static RegisterBasicUserResult decode(Object result) {
    result as List<Object?>;
    return RegisterBasicUserResult(
      rID: result[0]! as String,
    );
  }
}

class WriteProfileResult {
  WriteProfileResult({
    required this.consumerDeviceNumber,
  });

  String consumerDeviceNumber;

  Object encode() {
    return <Object?>[
      consumerDeviceNumber,
    ];
  }

  static WriteProfileResult decode(Object result) {
    result as List<Object?>;
    return WriteProfileResult(
      consumerDeviceNumber: result[0]! as String,
    );
  }
}

class WritePasscodeResult {
  WritePasscodeResult({
    required this.responseStatus,
  });

  ResponseStatus responseStatus;

  Object encode() {
    return <Object?>[
      responseStatus.index,
    ];
  }

  static WritePasscodeResult decode(Object result) {
    result as List<Object?>;
    return WritePasscodeResult(
      responseStatus: ResponseStatus.values[result[0]! as int],
    );
  }
}

class VerifyPasscodeResult {
  VerifyPasscodeResult({
    this.rID,
    required this.status,
    this.retryCount,
  });

  String? rID;

  bool status;

  int? retryCount;

  Object encode() {
    return <Object?>[
      rID,
      status,
      retryCount,
    ];
  }

  static VerifyPasscodeResult decode(Object result) {
    result as List<Object?>;
    return VerifyPasscodeResult(
      rID: result[0] as String?,
      status: result[1]! as bool,
      retryCount: result[2] as int?,
    );
  }
}

class Match {
  Match({
    required this.modality,
    required this.distance,
    required this.normalizedScore,
  });

  String modality;

  String distance;

  String normalizedScore;

  Object encode() {
    return <Object?>[
      modality,
      distance,
      normalizedScore,
    ];
  }

  static Match decode(Object result) {
    result as List<Object?>;
    return Match(
      modality: result[0]! as String,
      distance: result[1]! as String,
      normalizedScore: result[2]! as String,
    );
  }
}

class UserVerificationResult {
  UserVerificationResult({
    required this.isMatchFound,
    required this.rID,
    required this.biometricMatchList,
  });

  bool isMatchFound;

  String rID;

  List<Match?> biometricMatchList;

  Object encode() {
    return <Object?>[
      isMatchFound,
      rID,
      biometricMatchList,
    ];
  }

  static UserVerificationResult decode(Object result) {
    result as List<Object?>;
    return UserVerificationResult(
      isMatchFound: result[0]! as bool,
      rID: result[1]! as String,
      biometricMatchList: (result[2] as List<Object?>?)!.cast<Match?>(),
    );
  }
}

class UserIdentificationResult {
  UserIdentificationResult({
    required this.isMatchFound,
    required this.rID,
    required this.biometricMatchList,
  });

  bool isMatchFound;

  String rID;

  List<Match?> biometricMatchList;

  Object encode() {
    return <Object?>[
      isMatchFound,
      rID,
      biometricMatchList,
    ];
  }

  static UserIdentificationResult decode(Object result) {
    result as List<Object?>;
    return UserIdentificationResult(
      isMatchFound: result[0]! as bool,
      rID: result[1]! as String,
      biometricMatchList: (result[2] as List<Object?>?)!.cast<Match?>(),
    );
  }
}

class RegistrationDataResult {
  RegistrationDataResult({
    required this.isRegisteredInProgram,
    required this.authType,
    required this.modalityType,
    required this.rID,
  });

  bool isRegisteredInProgram;

  List<String?> authType;

  List<String?> modalityType;

  String rID;

  Object encode() {
    return <Object?>[
      isRegisteredInProgram,
      authType,
      modalityType,
      rID,
    ];
  }

  static RegistrationDataResult decode(Object result) {
    result as List<Object?>;
    return RegistrationDataResult(
      isRegisteredInProgram: result[0]! as bool,
      authType: (result[1] as List<Object?>?)!.cast<String?>(),
      modalityType: (result[2] as List<Object?>?)!.cast<String?>(),
      rID: result[3]! as String,
    );
  }
}

class ReadProgramSpaceResult {
  ReadProgramSpaceResult({
    required this.programSpaceData,
  });

  String programSpaceData;

  Object encode() {
    return <Object?>[
      programSpaceData,
    ];
  }

  static ReadProgramSpaceResult decode(Object result) {
    result as List<Object?>;
    return ReadProgramSpaceResult(
      programSpaceData: result[0]! as String,
    );
  }
}

class WriteProgramSpaceResult {
  WriteProgramSpaceResult({
    required this.isSuccess,
  });

  bool isSuccess;

  Object encode() {
    return <Object?>[
      isSuccess,
    ];
  }

  static WriteProgramSpaceResult decode(Object result) {
    result as List<Object?>;
    return WriteProgramSpaceResult(
      isSuccess: result[0]! as bool,
    );
  }
}

class BlacklistFormFactorResult {
  BlacklistFormFactorResult({
    required this.type,
    required this.status,
    required this.consumerDeviceNumber,
  });

  String type;

  FormFactorStatus status;

  String consumerDeviceNumber;

  Object encode() {
    return <Object?>[
      type,
      status.index,
      consumerDeviceNumber,
    ];
  }

  static BlacklistFormFactorResult decode(Object result) {
    result as List<Object?>;
    return BlacklistFormFactorResult(
      type: result[0]! as String,
      status: FormFactorStatus.values[result[1]! as int],
      consumerDeviceNumber: result[2]! as String,
    );
  }
}

class ReadSVAResult {
  ReadSVAResult({
    required this.currentBalance,
    required this.transactionCount,
    required this.purseType,
    required this.unit,
    required this.lastTransaction,
  });

  int currentBalance;

  int transactionCount;

  String purseType;

  String unit;

  Transaction lastTransaction;

  Object encode() {
    return <Object?>[
      currentBalance,
      transactionCount,
      purseType,
      unit,
      lastTransaction.encode(),
    ];
  }

  static ReadSVAResult decode(Object result) {
    result as List<Object?>;
    return ReadSVAResult(
      currentBalance: result[0]! as int,
      transactionCount: result[1]! as int,
      purseType: result[2]! as String,
      unit: result[3]! as String,
      lastTransaction: Transaction.decode(result[4]! as List<Object?>),
    );
  }
}

class Transaction {
  Transaction({
    required this.amount,
    required this.balance,
  });

  int amount;

  int balance;

  Object encode() {
    return <Object?>[
      amount,
      balance,
    ];
  }

  static Transaction decode(Object result) {
    result as List<Object?>;
    return Transaction(
      amount: result[0]! as int,
      balance: result[1]! as int,
    );
  }
}

class SVA {
  SVA({
    required this.type,
    required this.unit,
    required this.eVoucherType,
  });

  SVAType type;

  String unit;

  EVoucherType eVoucherType;

  Object encode() {
    return <Object?>[
      type.index,
      unit,
      eVoucherType.index,
    ];
  }

  static SVA decode(Object result) {
    result as List<Object?>;
    return SVA(
      type: SVAType.values[result[0]! as int],
      unit: result[1]! as String,
      eVoucherType: EVoucherType.values[result[2]! as int],
    );
  }
}

class CreateSVAResult {
  CreateSVAResult({
    required this.response,
  });

  String response;

  Object encode() {
    return <Object?>[
      response,
    ];
  }

  static CreateSVAResult decode(Object result) {
    result as List<Object?>;
    return CreateSVAResult(
      response: result[0]! as String,
    );
  }
}

class GenerateCpUserProfileResult {
  GenerateCpUserProfileResult({
    required this.token,
    required this.consumerDeviceNumber,
    required this.message,
  });

  String token;

  String consumerDeviceNumber;

  String message;

  Object encode() {
    return <Object?>[
      token,
      consumerDeviceNumber,
      message,
    ];
  }

  static GenerateCpUserProfileResult decode(Object result) {
    result as List<Object?>;
    return GenerateCpUserProfileResult(
      token: result[0]! as String,
      consumerDeviceNumber: result[1]! as String,
      message: result[2]! as String,
    );
  }
}

class _CommunityPassApiCodec extends StandardMessageCodec {
  const _CommunityPassApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AdditionalInfo) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is BlacklistFormFactorResult) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is CommunityPassConsentScreenResult) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ConsentResult) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ConsentScreenConfig) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is CreateSVAResult) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is DarkThemeColorScheme) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is GenerateCpUserProfileResult) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is LightThemeColorScheme) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is Match) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is ReadProgramSpaceResult) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is ReadSVAResult) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is RegisterBasicUserResult) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is RegisterUserWithBiometricsResult) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is RegistrationDataResult) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is SVA) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is SaveBiometricConsentResult) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is Transaction) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is UserIdentificationResult) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is UserVerificationResult) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is VerifyPasscodeResult) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is WritePasscodeResult) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is WriteProfileResult) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is WriteProgramSpaceResult) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AdditionalInfo.decode(readValue(buffer)!);
      case 129: 
        return BlacklistFormFactorResult.decode(readValue(buffer)!);
      case 130: 
        return CommunityPassConsentScreenResult.decode(readValue(buffer)!);
      case 131: 
        return ConsentResult.decode(readValue(buffer)!);
      case 132: 
        return ConsentScreenConfig.decode(readValue(buffer)!);
      case 133: 
        return CreateSVAResult.decode(readValue(buffer)!);
      case 134: 
        return DarkThemeColorScheme.decode(readValue(buffer)!);
      case 135: 
        return GenerateCpUserProfileResult.decode(readValue(buffer)!);
      case 136: 
        return LightThemeColorScheme.decode(readValue(buffer)!);
      case 137: 
        return Match.decode(readValue(buffer)!);
      case 138: 
        return ReadProgramSpaceResult.decode(readValue(buffer)!);
      case 139: 
        return ReadSVAResult.decode(readValue(buffer)!);
      case 140: 
        return RegisterBasicUserResult.decode(readValue(buffer)!);
      case 141: 
        return RegisterUserWithBiometricsResult.decode(readValue(buffer)!);
      case 142: 
        return RegistrationDataResult.decode(readValue(buffer)!);
      case 143: 
        return SVA.decode(readValue(buffer)!);
      case 144: 
        return SaveBiometricConsentResult.decode(readValue(buffer)!);
      case 145: 
        return Transaction.decode(readValue(buffer)!);
      case 146: 
        return UserIdentificationResult.decode(readValue(buffer)!);
      case 147: 
        return UserVerificationResult.decode(readValue(buffer)!);
      case 148: 
        return VerifyPasscodeResult.decode(readValue(buffer)!);
      case 149: 
        return WritePasscodeResult.decode(readValue(buffer)!);
      case 150: 
        return WriteProfileResult.decode(readValue(buffer)!);
      case 151: 
        return WriteProgramSpaceResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CommunityPassApi {
  /// Constructor for [CommunityPassApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CommunityPassApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _CommunityPassApiCodec();

  Future<SaveBiometricConsentResult> saveBiometricConsent(String reliantGUID, String programGUID, bool consumerConsentValue) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.saveBiometricConsent';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, consumerConsentValue]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as SaveBiometricConsentResult?)!;
    }
  }

  Future<CommunityPassConsentScreenResult> communityPassConsentWithPreBuiltUI(String reliantGUID, String programGUID, ConsentScreenConfig? consentScreenConfig) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.communityPassConsentWithPreBuiltUI';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, consentScreenConfig]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as CommunityPassConsentScreenResult?)!;
    }
  }

  Future<RegisterUserWithBiometricsResult> getRegisterUserWithBiometrics(String reliantGUID, String programGUID, String consentID, List<String?> modalities, OperationMode operationMode) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getRegisterUserWithBiometrics';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, consentID, modalities, operationMode.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as RegisterUserWithBiometricsResult?)!;
    }
  }

  Future<RegisterBasicUserResult> getRegisterBasicUser(String reliantGUID, String programGUID, String formFactor) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getRegisterBasicUser';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, formFactor]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as RegisterBasicUserResult?)!;
    }
  }

  Future<WriteProfileResult> getWriteProfile(String reliantGUID, String programGUID, String rID, bool overwriteCard) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getWriteProfile';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, rID, overwriteCard]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as WriteProfileResult?)!;
    }
  }

  Future<WritePasscodeResult> getWritePasscode(String reliantGUID, String programGUID, String rID, String passcode) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getWritePasscode';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, rID, passcode]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as WritePasscodeResult?)!;
    }
  }

  Future<VerifyPasscodeResult> getVerifyPasscode(String reliantGUID, String programGUID, String passcode, FormFactor formFactor, String? qrCpUserProfile) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getVerifyPasscode';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, passcode, formFactor.index, qrCpUserProfile]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as VerifyPasscodeResult?)!;
    }
  }

  Future<UserVerificationResult> getUserVerification(String reliantGUID, String programGUID, FormFactor formFactor, String? qrBase64, List<String?> modalities) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getUserVerification';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, formFactor.index, qrBase64, modalities]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as UserVerificationResult?)!;
    }
  }

  Future<RegistrationDataResult> getRegistrationData(String reliantGUID, String programGUID) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getRegistrationData';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as RegistrationDataResult?)!;
    }
  }

  Future<WriteProgramSpaceResult> getWriteProgramSpace(String reliantGUID, String programGUID, String rID, String programSpaceData, bool encryptData) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getWriteProgramSpace';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, rID, programSpaceData, encryptData]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as WriteProgramSpaceResult?)!;
    }
  }

  Future<ReadProgramSpaceResult> getReadProgramSpace(String reliantGUID, String programGUID, String rID, bool decryptData) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getReadProgramSpace';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, rID, decryptData]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as ReadProgramSpaceResult?)!;
    }
  }

  Future<BlacklistFormFactorResult> getBlacklistFormFactor(String reliantGUID, String programGUID, String rID, String consumerDeviceNumber, FormFactor type) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getBlacklistFormFactor';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, rID, consumerDeviceNumber, type.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as BlacklistFormFactorResult?)!;
    }
  }

  Future<ReadSVAResult> getReadSVA(String reliantGUID, String programGUID, String rID, String svaUnit) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getReadSVA';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, rID, svaUnit]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as ReadSVAResult?)!;
    }
  }

  Future<CreateSVAResult> getCreateSVA(String reliantGUID, String programGUID, String? rID, SVA sva) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getCreateSVA';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, rID, sva]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as CreateSVAResult?)!;
    }
  }

  Future<GenerateCpUserProfileResult> getGenerateCpUserProfile(String reliantGUID, String programGUID, String rID, String? passcode) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getGenerateCpUserProfile';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, rID, passcode]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as GenerateCpUserProfileResult?)!;
    }
  }

  Future<UserIdentificationResult> getUserIdentification(String reliantGUID, String programGUID, List<String?> modalities, bool cacheHashesIfIDentified, String? qrBase64, FormFactor formFactor) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getUserIdentification';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reliantGUID, programGUID, modalities, cacheHashesIfIDentified, qrBase64, formFactor.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as UserIdentificationResult?)!;
    }
  }
}
