// Copyright (c) 2022 Mastercard. All rights reserved.
// Use of this source code is governed by a Apache License, Version 2.0 that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum EnrolmentStatus {
  EXISTING,
  NEW,
}

enum ResponseStatus {
  SUCCESS,
  ERROR,
  UNDEFINED,
}

enum OperationMode {
  BEST_AVAILABLE,
  FULL,
}

enum Modality {
  FACE,
  LEFT_PALM,
  RIGHT_PALM,
}

enum FormFactorStatus {
  ACTIVE,
  BLACKLISTED,
  UNKNOWN,
  BLOCED,
}

enum FormFactor {
  CARD,
  QR,
  NONE,
}

enum SVAType {
  FinancialSVA,
  EVoucherSVA,
}

enum EVoucherType {
  COMMODITY,
  POINT,
}

class SaveBiometricConsentResult {
  SaveBiometricConsentResult({
    required this.consentID,
    required this.responseStatus,
  });

  String consentID;

  ResponseStatus responseStatus;

  Object encode() {
    return <Object?>[
      consentID,
      responseStatus.index,
    ];
  }

  static SaveBiometricConsentResult decode(Object result) {
    result as List<Object?>;
    return SaveBiometricConsentResult(
      consentID: result[0]! as String,
      responseStatus: ResponseStatus.values[result[1]! as int],
    );
  }
}

class RegisterUserWithBiometricsResult {
  RegisterUserWithBiometricsResult({
    required this.bioToken,
    required this.programGUID,
    required this.rID,
    required this.enrolmentStatus,
  });

  String bioToken;

  String programGUID;

  String rID;

  EnrolmentStatus enrolmentStatus;

  Object encode() {
    return <Object?>[
      bioToken,
      programGUID,
      rID,
      enrolmentStatus.index,
    ];
  }

  static RegisterUserWithBiometricsResult decode(Object result) {
    result as List<Object?>;
    return RegisterUserWithBiometricsResult(
      bioToken: result[0]! as String,
      programGUID: result[1]! as String,
      rID: result[2]! as String,
      enrolmentStatus: EnrolmentStatus.values[result[3]! as int],
    );
  }
}

class RegisterBasicUserResult {
  RegisterBasicUserResult({
    required this.rID,
  });

  String rID;

  Object encode() {
    return <Object?>[
      rID,
    ];
  }

  static RegisterBasicUserResult decode(Object result) {
    result as List<Object?>;
    return RegisterBasicUserResult(
      rID: result[0]! as String,
    );
  }
}

class WriteProfileResult {
  WriteProfileResult({
    required this.consumerDeviceNumber,
  });

  String consumerDeviceNumber;

  Object encode() {
    return <Object?>[
      consumerDeviceNumber,
    ];
  }

  static WriteProfileResult decode(Object result) {
    result as List<Object?>;
    return WriteProfileResult(
      consumerDeviceNumber: result[0]! as String,
    );
  }
}

class WritePasscodeResult {
  WritePasscodeResult({
    required this.responseStatus,
  });

  ResponseStatus responseStatus;

  Object encode() {
    return <Object?>[
      responseStatus.index,
    ];
  }

  static WritePasscodeResult decode(Object result) {
    result as List<Object?>;
    return WritePasscodeResult(
      responseStatus: ResponseStatus.values[result[0]! as int],
    );
  }
}

class VerifyPasscodeResult {
  VerifyPasscodeResult({
    this.rID,
    required this.status,
    this.retryCount,
  });

  String? rID;

  bool status;

  int? retryCount;

  Object encode() {
    return <Object?>[
      rID,
      status,
      retryCount,
    ];
  }

  static VerifyPasscodeResult decode(Object result) {
    result as List<Object?>;
    return VerifyPasscodeResult(
      rID: result[0] as String?,
      status: result[1]! as bool,
      retryCount: result[2] as int?,
    );
  }
}

class Match {
  Match({
    required this.modality,
    required this.distance,
    required this.normalizedScore,
  });

  String modality;

  String distance;

  String normalizedScore;

  Object encode() {
    return <Object?>[
      modality,
      distance,
      normalizedScore,
    ];
  }

  static Match decode(Object result) {
    result as List<Object?>;
    return Match(
      modality: result[0]! as String,
      distance: result[1]! as String,
      normalizedScore: result[2]! as String,
    );
  }
}

class UserVerificationResult {
  UserVerificationResult({
    required this.isMatchFound,
    required this.rID,
    required this.biometricMatchList,
  });

  bool isMatchFound;

  String rID;

  List<Match?> biometricMatchList;

  Object encode() {
    return <Object?>[
      isMatchFound,
      rID,
      biometricMatchList,
    ];
  }

  static UserVerificationResult decode(Object result) {
    result as List<Object?>;
    return UserVerificationResult(
      isMatchFound: result[0]! as bool,
      rID: result[1]! as String,
      biometricMatchList: (result[2] as List<Object?>?)!.cast<Match?>(),
    );
  }
}

class RegistrationDataResult {
  RegistrationDataResult({
    required this.isRegisteredInProgram,
    required this.authType,
    required this.modalityType,
    required this.rID,
  });

  bool isRegisteredInProgram;

  List<String?> authType;

  List<String?> modalityType;

  String rID;

  Object encode() {
    return <Object?>[
      isRegisteredInProgram,
      authType,
      modalityType,
      rID,
    ];
  }

  static RegistrationDataResult decode(Object result) {
    result as List<Object?>;
    return RegistrationDataResult(
      isRegisteredInProgram: result[0]! as bool,
      authType: (result[1] as List<Object?>?)!.cast<String?>(),
      modalityType: (result[2] as List<Object?>?)!.cast<String?>(),
      rID: result[3]! as String,
    );
  }
}

class ReadProgramSpaceResult {
  ReadProgramSpaceResult({
    required this.programSpaceData,
  });

  String programSpaceData;

  Object encode() {
    return <Object?>[
      programSpaceData,
    ];
  }

  static ReadProgramSpaceResult decode(Object result) {
    result as List<Object?>;
    return ReadProgramSpaceResult(
      programSpaceData: result[0]! as String,
    );
  }
}

class WriteProgramSpaceResult {
  WriteProgramSpaceResult({
    required this.isSuccess,
  });

  bool isSuccess;

  Object encode() {
    return <Object?>[
      isSuccess,
    ];
  }

  static WriteProgramSpaceResult decode(Object result) {
    result as List<Object?>;
    return WriteProgramSpaceResult(
      isSuccess: result[0]! as bool,
    );
  }
}

class BlacklistFormFactorResult {
  BlacklistFormFactorResult({
    required this.type,
    required this.status,
    required this.consumerDeviceNumber,
  });

  String type;

  FormFactorStatus status;

  String consumerDeviceNumber;

  Object encode() {
    return <Object?>[
      type,
      status.index,
      consumerDeviceNumber,
    ];
  }

  static BlacklistFormFactorResult decode(Object result) {
    result as List<Object?>;
    return BlacklistFormFactorResult(
      type: result[0]! as String,
      status: FormFactorStatus.values[result[1]! as int],
      consumerDeviceNumber: result[2]! as String,
    );
  }
}

class ReadSVAResult {
  ReadSVAResult({
    required this.currentBalance,
    required this.transactionCount,
    required this.purseType,
    required this.unit,
    required this.lastTransaction,
  });

  int currentBalance;

  int transactionCount;

  String purseType;

  String unit;

  Transaction lastTransaction;

  Object encode() {
    return <Object?>[
      currentBalance,
      transactionCount,
      purseType,
      unit,
      lastTransaction.encode(),
    ];
  }

  static ReadSVAResult decode(Object result) {
    result as List<Object?>;
    return ReadSVAResult(
      currentBalance: result[0]! as int,
      transactionCount: result[1]! as int,
      purseType: result[2]! as String,
      unit: result[3]! as String,
      lastTransaction: Transaction.decode(result[4]! as List<Object?>),
    );
  }
}

class Transaction {
  Transaction({
    required this.amount,
    required this.balance,
  });

  int amount;

  int balance;

  Object encode() {
    return <Object?>[
      amount,
      balance,
    ];
  }

  static Transaction decode(Object result) {
    result as List<Object?>;
    return Transaction(
      amount: result[0]! as int,
      balance: result[1]! as int,
    );
  }
}

class SVA {
  SVA({
    required this.type,
    required this.unit,
    required this.eVoucherType,
  });

  SVAType type;

  String unit;

  EVoucherType eVoucherType;

  Object encode() {
    return <Object?>[
      type.index,
      unit,
      eVoucherType.index,
    ];
  }

  static SVA decode(Object result) {
    result as List<Object?>;
    return SVA(
      type: SVAType.values[result[0]! as int],
      unit: result[1]! as String,
      eVoucherType: EVoucherType.values[result[2]! as int],
    );
  }
}

class CreateSVAResult {
  CreateSVAResult({
    required this.response,
  });

  String response;

  Object encode() {
    return <Object?>[
      response,
    ];
  }

  static CreateSVAResult decode(Object result) {
    result as List<Object?>;
    return CreateSVAResult(
      response: result[0]! as String,
    );
  }
}

class GenerateCpUserProfileResult {
  GenerateCpUserProfileResult({
    required this.token,
    required this.consumerDeviceNumber,
    required this.message,
  });

  String token;

  String consumerDeviceNumber;

  String message;

  Object encode() {
    return <Object?>[
      token,
      consumerDeviceNumber,
      message,
    ];
  }

  static GenerateCpUserProfileResult decode(Object result) {
    result as List<Object?>;
    return GenerateCpUserProfileResult(
      token: result[0]! as String,
      consumerDeviceNumber: result[1]! as String,
      message: result[2]! as String,
    );
  }
}

class _CommunityPassApiCodec extends StandardMessageCodec {
  const _CommunityPassApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BlacklistFormFactorResult) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is CreateSVAResult) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is GenerateCpUserProfileResult) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is Match) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ReadProgramSpaceResult) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ReadSVAResult) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is RegisterBasicUserResult) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is RegisterUserWithBiometricsResult) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is RegistrationDataResult) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is SVA) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is SaveBiometricConsentResult) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is Transaction) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is UserVerificationResult) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is VerifyPasscodeResult) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is WritePasscodeResult) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is WriteProfileResult) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is WriteProgramSpaceResult) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return BlacklistFormFactorResult.decode(readValue(buffer)!);
      case 129: 
        return CreateSVAResult.decode(readValue(buffer)!);
      case 130: 
        return GenerateCpUserProfileResult.decode(readValue(buffer)!);
      case 131: 
        return Match.decode(readValue(buffer)!);
      case 132: 
        return ReadProgramSpaceResult.decode(readValue(buffer)!);
      case 133: 
        return ReadSVAResult.decode(readValue(buffer)!);
      case 134: 
        return RegisterBasicUserResult.decode(readValue(buffer)!);
      case 135: 
        return RegisterUserWithBiometricsResult.decode(readValue(buffer)!);
      case 136: 
        return RegistrationDataResult.decode(readValue(buffer)!);
      case 137: 
        return SVA.decode(readValue(buffer)!);
      case 138: 
        return SaveBiometricConsentResult.decode(readValue(buffer)!);
      case 139: 
        return Transaction.decode(readValue(buffer)!);
      case 140: 
        return UserVerificationResult.decode(readValue(buffer)!);
      case 141: 
        return VerifyPasscodeResult.decode(readValue(buffer)!);
      case 142: 
        return WritePasscodeResult.decode(readValue(buffer)!);
      case 143: 
        return WriteProfileResult.decode(readValue(buffer)!);
      case 144: 
        return WriteProgramSpaceResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CommunityPassApi {
  /// Constructor for [CommunityPassApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CommunityPassApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _CommunityPassApiCodec();

  Future<SaveBiometricConsentResult> saveBiometricConsent(String arg_reliantGUID, String arg_programGUID, bool arg_consumerConsentValue) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.saveBiometricConsent', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_consumerConsentValue]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as SaveBiometricConsentResult?)!;
    }
  }

  Future<RegisterUserWithBiometricsResult> getRegisterUserWithBiometrics(String arg_reliantGUID, String arg_programGUID, String arg_consentID, List<String?> arg_modalities, OperationMode arg_operationMode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getRegisterUserWithBiometrics', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_consentID, arg_modalities, arg_operationMode.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as RegisterUserWithBiometricsResult?)!;
    }
  }

  Future<RegisterBasicUserResult> getRegisterBasicUser(String arg_reliantGUID, String arg_programGUID, String arg_formFactor) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getRegisterBasicUser', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_formFactor]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as RegisterBasicUserResult?)!;
    }
  }

  Future<WriteProfileResult> getWriteProfile(String arg_reliantGUID, String arg_programGUID, String arg_rID, bool arg_overwriteCard) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getWriteProfile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_rID, arg_overwriteCard]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as WriteProfileResult?)!;
    }
  }

  Future<WritePasscodeResult> getWritePasscode(String arg_reliantGUID, String arg_programGUID, String arg_rID, String arg_passcode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getWritePasscode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_rID, arg_passcode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as WritePasscodeResult?)!;
    }
  }

  Future<VerifyPasscodeResult> getVerifyPasscode(String arg_reliantGUID, String arg_programGUID, String arg_passcode, FormFactor arg_formFactor, String? arg_qrCpUserProfile) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getVerifyPasscode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_passcode, arg_formFactor.index, arg_qrCpUserProfile]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as VerifyPasscodeResult?)!;
    }
  }

  Future<UserVerificationResult> getUserVerification(String arg_reliantGUID, String arg_programGUID, FormFactor arg_formFactor, String? arg_qrBase64, List<String?> arg_modalities) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getUserVerification', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_formFactor.index, arg_qrBase64, arg_modalities]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as UserVerificationResult?)!;
    }
  }

  Future<RegistrationDataResult> getRegistrationData(String arg_reliantGUID, String arg_programGUID) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getRegistrationData', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as RegistrationDataResult?)!;
    }
  }

  Future<WriteProgramSpaceResult> getWriteProgramSpace(String arg_reliantGUID, String arg_programGUID, String arg_rID, String arg_programSpaceData, bool arg_encryptData) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getWriteProgramSpace', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_rID, arg_programSpaceData, arg_encryptData]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as WriteProgramSpaceResult?)!;
    }
  }

  Future<ReadProgramSpaceResult> getReadProgramSpace(String arg_reliantGUID, String arg_programGUID, String arg_rID, bool arg_decryptData) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getReadProgramSpace', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_rID, arg_decryptData]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ReadProgramSpaceResult?)!;
    }
  }

  Future<BlacklistFormFactorResult> getBlacklistFormFactor(String arg_reliantGUID, String arg_programGUID, String arg_rID, String arg_consumerDeviceNumber, FormFactor arg_type) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getBlacklistFormFactor', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_rID, arg_consumerDeviceNumber, arg_type.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as BlacklistFormFactorResult?)!;
    }
  }

  Future<ReadSVAResult> getReadSVA(String arg_reliantGUID, String arg_programGUID, String arg_rID, String arg_svaUnit) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getReadSVA', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_rID, arg_svaUnit]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ReadSVAResult?)!;
    }
  }

  Future<CreateSVAResult> getCreateSVA(String arg_reliantGUID, String arg_programGUID, String? arg_rID, SVA arg_sva) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getCreateSVA', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_rID, arg_sva]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as CreateSVAResult?)!;
    }
  }

  Future<GenerateCpUserProfileResult> getGenerateCpUserProfile(String arg_reliantGUID, String arg_programGUID, String arg_rID, String? arg_passcode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.compass_library_wrapper_plugin.CommunityPassApi.getGenerateCpUserProfile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_reliantGUID, arg_programGUID, arg_rID, arg_passcode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as GenerateCpUserProfileResult?)!;
    }
  }
}
